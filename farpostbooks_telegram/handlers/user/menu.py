import logging
from datetime import datetime
from typing import Any

from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager, StartMode, ShowMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Cancel, Row, Back, Button
from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const, Format
from tortoise.query_utils import Prefetch

from farpostbooks_telegram.misc.states import SearchBook
from farpostbooks_telegram.models.users import BookModel, UserBookModel


async def search(_: Message, dialog_manager: DialogManager):
    await dialog_manager.start(
        SearchBook.isbn,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.EDIT
    )


async def my_book(message: Message, dialog_manager: DialogManager):
    book = await UserBookModel.get_or_none(
        user_id=message.from_user.id,
        back_timestamp__isnull=True
    )
    if book is None:
        await message.answer(
            '<b>üìö –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–Ω–∏–≥–∏, –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –µ—ë –≤ –±–æ—Ç–µ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ.</b>'
        )
        return

    await dialog_manager.start(
        SearchBook.book,
        data={'isbn': book.book_id},
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.EDIT
    )


def rating_button_creator():
    buttons = []
    for index in range(1, 6):
        buttons.append(
            Button(
                Const(str(f'{index} ‚≠êÔ∏è')),
                id=str(index),
                on_click=on_rating_selected
            )
        )
    return buttons


def generate_book_info(book: BookModel, on_shelf: bool):
    return (
        f'<b>#Ô∏è‚É£ ISBN:</b> <code>{book.id}</code>\n'
        f'<b>üìî –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{book.name}</code>\n'
        f'<b>üìî –û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{book.description[:200]}...</code>\n'
        f'<b>üë§ –ê–≤—Ç–æ—Ä—Å—Ç–≤–æ:</b> <code>{book.author}</code>\n'
        f'<b>üìÜ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> <code>{book.publish}</code>\n\n'
        f'<b>üóÑ –ö–Ω–∏–≥–∞ –Ω–∞ –ø–æ–ª–∫–µ?</b> <code>{"–î–∞" if on_shelf else "–ù–µ—Ç"}</code>'
    )


async def get_data(dialog_manager: DialogManager, **_):
    book = await BookModel.filter(
        id=dialog_manager.dialog_data.get('isbn', dialog_manager.start_data.get('isbn'))
    ).first().prefetch_related(
        Prefetch('user_books', UserBookModel.filter(back_timestamp__isnull=True))
    )
    on_shelf = not book.user_books
    return {
        'dialog_data': 'isbn' in dialog_manager.dialog_data,
        'path': f'images/{book.image}',
        'message': generate_book_info(book, on_shelf),
        'on_shelf': on_shelf
    }


async def send_book(message: Message, _: MessageInput, manager: DialogManager):
    try:
        isbn = int(message.text)
    except ValueError:
        manager.dialog_data['isbn_error'] = (
            '<b>üò• –ü–æ—Ö–æ–∂–µ –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ ISBN –∫–Ω–∏–≥–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>',
        )
        return

    book = await BookModel.filter(id=isbn).first().prefetch_related(
        Prefetch('user_books', UserBookModel.filter(back_timestamp__isnull=True))
    )

    if book is None:
        manager.dialog_data['isbn_error'] = (
            '<b>üò• –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É ISBN.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>',
        )
        return

    if 'isbn_error' in manager.dialog_data:
        del manager.dialog_data['isbn_error']

    manager.dialog_data['isbn'] = isbn
    await manager.next()


async def take_book(query: CallbackQuery, _: Any, manager: DialogManager):
    isbn: int = manager.dialog_data.get('isbn', manager.start_data.get('isbn'))

    if await UserBookModel.get_or_none(
        user_id=query.from_user.id,
        back_timestamp__isnull=True,
    ) is not None:
        await query.answer('üìî –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–Ω–∏–≥–∞!')
        return

    if await UserBookModel.get_or_none(
        book_id=isbn,
        back_timestamp__isnull=True,
    ) is not None:
        await query.answer('üìî –ö—Ç–æ-—Ç–æ —É–∂–µ –≤–∑—è–ª —ç—Ç—É –∫–Ω–∏–≥—É!')
        return

    await UserBookModel.create(
        user_id=query.from_user.id,
        book_id=isbn,
    )


async def return_book(query: CallbackQuery, _: Any, manager: DialogManager):
    isbn: int = manager.dialog_data.get('isbn', manager.start_data.get('isbn'))

    book = await UserBookModel.get_or_none(
        user_id=query.from_user.id,
        book_id=isbn,
        back_timestamp__isnull=True,
    )
    if book is None:
        await query.answer('üìî –≠—Ç–∞ –∫–Ω–∏–≥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–µ –≤–∞–º.')
        return
    await manager.switch_to(SearchBook.rating)


async def on_rating_selected(
    query: CallbackQuery,
    widget: Any,
    manager: DialogManager,
):
    await UserBookModel.filter(
        user_id=query.from_user.id,
        book_id=manager.dialog_data.get('isbn', manager.start_data.get('isbn')),
    ).update(
        back_timestamp=datetime.utcnow(),
        rating=int(query.data),
    )
    await manager.switch_to(SearchBook.book)


book_dialog = Dialog(
    Window(
        Const(
            '<b>üåê –ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ ISBN –∫–Ω–∏–≥–∏ <i>(–æ–±—ã—á–Ω–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–∞–¥–Ω–µ–π '
            '—Å—Ç–æ—Ä–æ–Ω–µ –∫–Ω–∏–≥–∏)</i> –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏ —è –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –∫–Ω–∏–≥—É.</b>',
            when=~F['isbn_error']
        ),
        Format('{message}', when=F['isbn_error']),
        MessageInput(send_book),
        Cancel(Const('üö™ –í—ã–π—Ç–∏')),
        state=SearchBook.isbn,
    ),
    Window(
        StaticMedia(
            path=Format('{path}'),
        ),
        Format("{message}"),
        Button(
            Const('üìó –í–∑—è—Ç—å –∫–Ω–∏–≥—É'),
            id='take_book',
            on_click=take_book,
            when=F['on_shelf']
        ),
        Button(
            Const('üìï –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É'),
            id='return_book',
            on_click=return_book,
            when=~F['on_shelf']
        ),
        Row(
            Back(Const('üîô –ù–∞–∑–∞–¥'), when=F['dialog_data']),
            Cancel(Const('üö™ –í—ã–π—Ç–∏')),
        ),
        getter=get_data,
        state=SearchBook.book,
    ),
    Window(
        Const('<b>üåü –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É –Ω–∞ –º–µ—Å—Ç–æ, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –µ–π –æ—Ü–µ–Ω–∫—É '
              '–æ—Ç <code>1 –¥–æ 5</code>, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É.</b>'),
        Row(
            *rating_button_creator(),
        ),
        Row(
            Back(Const('üîô –ù–∞–∑–∞–¥')),
            Cancel(Const('üö™ –í—ã–π—Ç–∏')),
        ),
        state=SearchBook.rating
    ),
)
